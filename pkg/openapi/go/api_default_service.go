/*
 * Message Board
 *
 * This is an example server for message board.
 *
 * API version: 1.0.0
 * Contact: antony.h@riseup.net
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"

	"github.com/antonyho/go-message-board-example/pkg/auth"
	"github.com/antonyho/go-message-board-example/pkg/message"
)

// DefaultApiService is a service that implents the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
	authService auth.Authenticator
	msgBoard    *message.Board
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService(authService auth.Authenticator, msgBoard *message.Board) DefaultApiServicer {
	return &DefaultApiService{
		authService: authService,
		msgBoard:    msgBoard,
	}
}

// EditMessage -
func (s *DefaultApiService) EditMessage(id string, message Message) (interface{}, error) {
	err := s.msgBoard.Update(id, message.Text)
	return nil, err
}

// ListMessages -
func (s *DefaultApiService) ListMessages() (interface{}, error) {
	posts := s.msgBoard.List()
	resp := make([]Message, len(posts))
	// Actually both structs have the same JSON structures
	for idx, post := range posts {
		resp[idx] = Message{
			Id:           post.ID(),
			Name:         post.Name(),
			Email:        post.Email(),
			Text:         post.Text(),
			CreationTime: post.CreationTime().Format(time.RFC3339),
		}
	}
	return resp, nil
}

// Login -
func (s *DefaultApiService) Login(credential Credential) (interface{}, error) {
	token, err := s.authService.Grant(credential.Login, credential.Password)
	if err != nil {
		return nil, err
	}
	return token, nil
}

// PostMessage -
func (s *DefaultApiService) PostMessage(message Message) (interface{}, error) {
	s.msgBoard.Paste(message.Text, message.Name, message.Email)
	return nil, nil
}

// ViewMessage -
func (s *DefaultApiService) ViewMessage(id string) (interface{}, error) {
	post, err := s.msgBoard.View(id)
	if err != nil {
		return nil, err
	}
	return Message{
		Id:           post.ID(),
		Name:         post.Name(),
		Email:        post.Email(),
		Text:         post.Text(),
		CreationTime: post.CreationTime().Format(time.RFC3339),
	}, nil
}
