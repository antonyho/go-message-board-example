openapi: 3.0.3
info:
  contact:
    email: antony.h@riseup.net
    name: Antony Ho
    url: https://antonyho.net/
  description: This is an example server for message board.
  license:
    name: MIT
  title: Message Board
  version: 1.0.0
servers:
- description: developer server
  url: http://localhost:{port}/{basePath}
  variables:
    port:
      default: "8080"
      enum:
      - "8080"
    basePath:
      default: v1
paths:
  /message:
    post:
      description: post new message
      operationId: postMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
        description: post a new message to message board
        required: true
      responses:
        "201":
          description: new message posted
        "400":
          description: wrong message format
  /message/{id}:
    get:
      description: view a message
      operationId: viewMessage
      parameters:
      - description: ID of an existing message
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: a single message of given ID
        "404":
          description: message not found
    put:
      description: edit a message
      operationId: editMessage
      parameters:
      - description: ID of an existing message
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
        description: post an updated message
        required: true
      responses:
        "202":
          description: messasge updated
        "400":
          description: wrong message format
        "401":
          description: Access token is missing or invalid
        "404":
          description: message not found
      security:
      - bearerAuth: []
  /messages:
    get:
      description: list all messages on the board
      operationId: listMessages
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Message'
                type: array
          description: list of all messages on the board
  /login:
    post:
      description: login
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credential'
        description: administrator login
        required: true
      responses:
        "200":
          description: successful
          headers:
            Authorization:
              description: JWT
              explode: false
              schema:
                type: string
              style: simple
        "400":
          description: Invalid credential
components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    Message:
      example:
        creation_time: 2017-12-14T06:20:33-08:00
        name: name
        id: 2C7BCEC7-CD14-D6E5-3FBF-F9551375429A
        text: text
        email: email
      properties:
        id:
          description: UUID v4
          example: 2C7BCEC7-CD14-D6E5-3FBF-F9551375429A
          type: string
        name:
          type: string
        email:
          type: string
        text:
          type: string
        creation_time:
          example: 2017-12-14T06:20:33-08:00
          type: string
      required:
      - text
      type: object
    Credential:
      example:
        password: password
        login: login
      properties:
        login:
          type: string
        password:
          type: string
      required:
      - login
      - password
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
